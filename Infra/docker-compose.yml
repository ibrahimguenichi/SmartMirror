name: smartmirror

services:
  backend:
    build:
      context: ../SmartMirror
      dockerfile: Dockerfile
    image: smartmirror-backend
    container_name: backend
    restart: always
    ports:
      - "${SPRING_APP_PORT}:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
    depends_on:
      - postgres
    networks:
      - smartmirror_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 15s
      retries: 5
  ai:
    build:
      context: ../AI_backend
      dockerfile: Dockerfile
    image: smartmirror-ai
    container_name: AI_backend
    restart: always
    ports:
      - "${FASTAPI_PORT:-8000}:8000"
    networks:
      - smartmirror_network
    volumes:
      - insightface_models:/root/.insightface
      - ai_knowledge:/app/data/fablab_knowledge
    environment:
      FASTAPI_PORT: ${FASTAPI_PORT:-8000}
      PGVECTOR_DB_URL: postgres://${DB_USER}:${DB_PASSWORD}@postgres:${DB_PORT}/${DB_NAME}
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      retries: 5
  postgres:
    build:
      context: .
      dockerfile: Dockerfile.pgvector
    container_name: SmartMirror-db
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: ${DB_NAME:-smartmirror}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - smartmirror_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      retries: 5
  ngrok_backend:
    image: ngrok/ngrok:latest
    container_name: smartmirror-ngrok-back
    environment:
      NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN_BACK}
    command: http --url=${URL_BACKEND} host.docker.internal:8080
    depends_on:
      - backend
    networks:
      - smartmirror_network
  ngrok_frontend:
    image: ngrok/ngrok:latest
    container_name: smartmirror-ngrok-front
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN_FRONT}
    command: http --url=${URL_FRONTEND} host.docker.internal:5173
    networks:
      - smartmirror_network
  pgweb:
    image: sosedoff/pgweb
    container_name: pgweb_dev
    restart: unless-stopped
    ports:
      - "55432:8081"
    environment:
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?sslmode=disable
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - smartmirror_network
  llm:
    image: ollama/ollama
    container_name: ollama_service
    ports:
      - "11434:11434"
    volumes:
      - llm_models:/root/.ollama
    environment:
      - LLM_MODEL=${LLM_MODEL}
    entrypoint: >
      bash -c "
        ollama serve &
        sleep 5 &&
        ollama pull ${LLM_MODEL} &&
        wait
      "

volumes:
  pgdata:
  insightface_models:
  llm_models:
  ai_knowledge:

networks:
  smartmirror_network:
    driver: bridge